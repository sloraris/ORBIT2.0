---
- name: Recursive DNS Server
  hosts: server_dns
  become: true

  pre_tasks:
    - name: Check if NetworkManager connection profile exists
      ansible.builtin.stat:
        path: /etc/NetworkManager/system-connections/your_profile_name
      register: profile_stat

    - name: Profile exists message
      ansible.builtin.debug:
        msg: Profile exists. Please configure DNS manually.
      when: profile_stat.stat.exists

  tasks:
    # Install needed packages
    - name: Update and upgrade apt packages
      ansible.builtin.apt:
        update_cache: true
        upgrade: dist

    - name: Install prerequisites
      ansible.builtin.apt:
        name:
          - wget
          - tar
          - dnsutils
          - unbound
        state: present

    # Setup Unbound
    - name: Download Unbound config file
      ansible.builtin.get_url:
        url: "{{ unbound_config_url }}"
        dest: /etc/unbound/unbound.conf.d/pi-hole.conf
        mode: "0644"

    - name: Check if unbound-resolvconf service is active
      ansible.builtin.systemd:
        name: unbound-resolvconf
        state: started
      register: unbound_resolvconf_status
      ignore_errors: true

    - name: Disable unbound-resolvconf service
      ansible.builtin.service:
        name: unbound-resolvconf
        state: stopped
        enabled: false
      when: unbound_resolvconf_status.stdout == "active"

    - name: Comment out unbound_conf in /etc/resolvconf.conf
      ansible.builtin.lineinfile:
        path: /etc/resolvconf.conf
        regexp: ^unbound_conf=
        line: "#unbound_conf="
        state: present
      when: unbound_resolvconf_status.stdout == 'active'

    - name: Remove /etc/unbound/unbound.conf.d/resolvconf_resolvers.conf
      ansible.builtin.file:
        path: /etc/unbound/unbound.conf.d/resolvconf_resolvers.conf
        state: absent
      when: unbound_resolvconf_status.stdout == 'active'

    - name: Restart Unbound service
      ansible.builtin.service:
        name: unbound
        state: restarted
        enabled: true

    # Setup AdGuard Home
    - name: Check if Adguard exists
      ansible.builtin.stat:
        path: "{{ dns_base_path }}/AdGuardHome"
      register: adguard_dir_stat

    - name: Download AdGuard Home (does not exist on device)
      ansible.builtin.get_url:
        url: https://static.adguard.com/adguardhome/release/AdGuardHome_linux_armv6.tar.gz
        dest: "{{ dns_base_path }}/."
        mode: "0644"
      when: not adguard_dir_stat.stat.exists

    - name: Unpack Adguard
      ansible.builtin.unarchive:
        src: "{{ dns_base_path }}/AdGuardHome_linux_armv6.tar.gz"
        dest: "{{ dns_base_path }}/AdGuardHome"
      when: not adguard_dir_stat.stat.exists

    - name: Install AdGuard (service does not exist)
      ansible.builtin.command:
        cmd: ./AdGuardHome -s install
        chdir: "{{ dns_base_path }}"
        creates: /etc/systemd/system/AdGuardHome.service
      when: not adguard_dir_stat.stat.exists

    - name: Check if AdGuard is active (exists on device)
      ansible.builtin.systemd:
        service: AdGuardHome
        state: started
      register: adguard_status
      ignore_errors: true
      when: adguard_serv_stat.stat.exists

    - name: Start AdGuard (already installed)
      ansible.builtin.service:
        name: AdGuardHome
        state: started
        enabled: true
      when: adguard_status.stdout == 'inactive'

    - name: Download Adguard config file
      ansible.builtin.get_url:
        url: "{{ adguard_config_url }}"
        dest: "{{ dns_base_path }}/AdGuardHome/AdGuardHome.yaml"
        mode: "0644"
        backup: true

    - name: Change set password for AdGuard
      ansible.builtin.lineinfile:
        path: "{{ dns_base_path }}/AdGuardHome/AdGuardHome.yaml"
        regexp: ^password:.*
        line: "password: {{ adguard_pswd }}"
        state: present

    - name: Restart AdGuard Home
      ansible.builtin.service:
        name: AdGuardHome
        state: restarted
        enabled: true

    # Setup DNS
    - name: Check if wired connection profile exists
      ansible.builtin.stat:
        path: /etc/NetworkManager/system-connections/WiredConnection1.nmconnection
      register: profile_stat

    - name: Download NM template file
      ansible.builtin.get_url:
        url: "{{ nm_template_url }}"
        dest: /etc/NetworkManager/system-connections/WiredConnection1.nmconnection
        mode: "0755"
        backup: true
      when: not profile_stat.stat.exists

    - name: Generate a new UUID and store it in a variable
      ansible.builtin.command:
        cmd: uuidgen
      register: new_uuid
      changed_when: new_uuid.rc != 0
      when: not profile_stat.stat.exists

    - name: Insert UUID into the connection profile
      ansible.builtin.lineinfile:
        path: /etc/NetworkManager/system-connections/WiredConnection1.nmconnection
        regexp: ^uuid=.*
        line: uuid={{ new_uuid.stdout }}
      when: not profile_stat.stat.exists

    - name: Restart NetworkManager to apply new configuration
      ansible.builtin.service:
        name: NetworkManager
        state: restarted
      when: not profile_stat.stat.exists
