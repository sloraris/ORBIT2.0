---
- name: Recursive DNS Server
  hosts: server_dns
  become: yes
  tasks:

    # Install needed packages
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install prerequisites
      apt:
        name:
          - wget
          - tar
          - dnsutils
          - unbound
        state: present


    # Setup Unbound
    - name: Download Unbound config file
      get_url:
        url: "{{ unbound_config_url }}"
        dest: /etc/unbound/unbound.conf.d/pi-hole.conf
        mode: '0644'

    - name: Check if unbound-resolvconf service is active
      command: systemctl is-active unbound-resolvconf.service
      register: unbound_resolvconf_status
      ignore_errors: yes

    - name: Disable unbound-resolvconf service
      service:
        name: unbound-resolvconf
        state: stopped
        enabled: no
      when: unbound_resolvconf_status.stdout == "active"

    - name: Comment out unbound_conf in /etc/resolvconf.conf
      lineinfile:
        path: /etc/resolvconf.conf
        regexp: '^unbound_conf='
        line: '#unbound_conf='
        state: present
      when: unbound_resolvconf_status.stdout == 'active'

    - name: Remove /etc/unbound/unbound.conf.d/resolvconf_resolvers.conf
      file:
        path: /etc/unbound/unbound.conf.d/resolvconf_resolvers.conf
        state: absent
      when: unbound_resolvconf_status.stdout == 'active'

    - name: Restart Unbound service
      service:
        name: unbound
        state: restarted
        enabled: yes


    # Setup AdGuard Home
    - name: Check if Adguard exists
      stat:
        path: "{{ dns_base_path }}"/AdGuardHome
      register: adguard_dir_stat

    - name: Download AdGuard Home (does not exist on device)
      shell: |
        wget 'https://static.adguard.com/adguardhome/release/AdGuardHome_linux_armv6.tar.gz'
        tar -xf AdGuardHome_linux_armv6.tar.gz
      args:
        chdir: "{{ dns_base_path }}"
      when: adguard_dir_stat.stat.exists == False

    - name: Check if AdGuard service exists
      stat:
        path: /etc/systemd/system/AdGuardHome.service
      register: adguard_serv_stat

    - name: Install AdGuard
      shell: "./AdGuardHome -s install"
      args:
        chdir: "{{ dns_base_path }}"
      when: adguard_serv_stat.stat.exists == False

    - name: Check if AdGuard is active (exists on device)
      command: systemctl is-active AdGuardHome.service
      register: adguard_status
      ignore_errors: yes
      when: adguard_serv_stat.stat.exists == True

    - name: Start AdGuard (already installed)
      service:
        name: AdGuardHome
        state: started
        enabled: yes
      when: adguard_status.stdout == 'inactive'

    - name: Download Adguard config file
      get_url:
        url: "{{ adguard_config_url }}"
        dest: "{{ dns_base_path }}"/AdGuardHome/AdGuardHome.yaml
        mode: '0644'
        backup: yes

    - name: Change set password for AdGuard
      lineinfile:
        path: "{{ dns_base_path }}"/AdGuardHome/AdGuardHome.yaml
        regexp: '^password:.*'
        line: "password: {{ adguard_pswd }}"
        state: present

    - name: Restart AdGuard Home
      service:
        name: AdGuardHome
        state: restarted
        enabled: yes


    # Setup DNS
    - name: Check if wired connection profile exists
      stat:
        path: /etc/NetworkManager/system-connections/WiredConnection1.nmconnection
      register: profile_stat

    - name: Download NM template file
      get_url:
        url: "{{ nm_template_url }}"
        dest: /etc/NetworkManager/system-connections/WiredConnection1.nmconnection
        mode: '0755'
        backup: yes
      when: profile_stat.stat.exists == False

    - name: Generate a UUID for the connection profile if it does not exist
      command: uuidgen
      register: new_uuid
      when: profile_stat.stat.exists == False

    - name: Insert UUID into the connection profile
      lineinfile:
        path: /etc/NetworkManager/system-connections/WiredConnection1.nmconnection
        regexp: '^uuid=.*'
        line: "uuid={{ new_uuid.stdout }}"
      when: profile_stat.stat.exists == False

    - name: Restart NetworkManager to apply new configuration
      service:
        name: NetworkManager
        state: restarted
      when: profile_stat.stat.exists == False

    - name: NetworkManager connection profile exists!
      command: echo "Profile exists. Please configure DNS manually."
      when: profile_stat.stat.exists == True