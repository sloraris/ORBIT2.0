---
- name: Recursive DNS Server
  hosts: server_dns
  become: yes
  tasks:
    # Install needed packages
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install prerequisites
      apt:
        name:
          - wget
          - git
          - tar
          - dnsutils
          - unbound
        state: present


    # Download Github config files
    - name: Download server_dns config files to temporary location
      git:
        repo: 'https://github.com/sloraris/ORBIT2.0.git/server_dns'
        dest: ~/config-tmp
        version: master
        force: yes


    # Setup Unbound
    - name: Copy Unbound config file to the appropriate location
      copy:
        src: ~/config-tmp/unbound.conf
        dest: /etc/unbound/unbound.conf.d/pi-hole.conf
        owner: root
        group: root
        mode: '0644'

    - name: Check if unbound-resolvconf service is active
      command: systemctl is-active unbound-resolvconf.service
      register: unbound_resolvconf_status
      ignore_errors: yes

    - name: Disable unbound-resolvconf service
      service:
        name: unbound-resolvconf
        state: stopped
        enabled: no
      when: unbound_resolvconf_status.stdout == "active"

    - name: Comment out unbound_conf in /etc/resolvconf.conf
      lineinfile:
        path: /etc/resolvconf.conf
        regexp: '^unbound_conf='
        line: '#unbound_conf='
        state: present
      when: unbound_resolvconf_status.stdout == 'active'

    - name: Remove /etc/unbound/unbound.conf.d/resolvconf_resolvers.conf
      file:
        path: /etc/unbound/unbound.conf.d/resolvconf_resolvers.conf
        state: absent
      when: unbound_resolvconf_status.stdout == 'active'

    - name: Restart Unbound service
      service:
        name: unbound
        state: restarted
        enabled: yes


    # Setup AdGuard Home
    - name: Check if Adguard exists
      stat:
        path: ~/AdGuard
      register: adguard_stat

    - name: Install AdGuard Home
      shell: |
        wget 'https://static.adguard.com/adguardhome/release/AdGuardHome_linux_armv6.tar.gz'
        tar -xf AdGuardHome_linux_armv6.tar.gz
        cd AdGuardHome
        ./AdGuardHome -s install
      args:
        chdir: ~
      when: adguard_stat.stat.exists == False

    - name: Copy AdGuard config file to the appropriate location
      copy:
        src: ~/config-tmp/AdGuardHome.yaml
        dest: ~/AdGuardHome/AdGuardHome.yaml
        owner: root
        group: root
        mode: '0644'
        backup: yes

    - name: Clean up cloned repository
      file:
        path: ~/config-tmp
        state: absent

    - name: Change set password for AdGuard
      lineinfile:
        path: ~/AdGuardHome/AdGuardHome.yaml
        regexp: '^password:.*'
        line: "password: {{ adguard_pswd }}"
        state: present

    - name: Start AdGuard Home
      service:
        name: AdGuardHome
        state: started
        enabled: yes


    # Setup DNS
    - name: Check if wired connection profile exists
      stat:
        path: /etc/NetworkManager/system-connections/WiredConnection1.nmconnection
      register: profile_stat

    - name: Copy the connection profile template
      copy:
        src: ~/config-tmp/template.nmconnection
        dest: /etc/NetworkManager/system-connections/WiredConnection1.nmconnection
        owner: root
        group: root
        mode: '0755'
        backup: yes
      when: profile_stat.stat.exists == False

    - name: Generate a UUID for the connection profile if it does not exist
      command: uuidgen
      register: new_uuid
      when: profile_stat.stat.exists == False

    - name: Insert UUID into the connection profile
      lineinfile:
        path: /etc/NetworkManager/system-connections/WiredConnection1.nmconnection
        regexp: '^uuid=.*'
        line: "uuid={{ new_uuid.stdout }}"
      when: profile_stat.stat.exists == False

    - name: Restart NetworkManager to apply new configuration
      service:
        name: NetworkManager
        state: restarted
      when: profile_stat.stat.exists == False

    - name: NetworkManager connection profile exists!
      command: echo "Profile exists. Please configure DNS manually."
      when: profile_stat.stat.exists == True